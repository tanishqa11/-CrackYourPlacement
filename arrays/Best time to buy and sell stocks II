class Solution {
//     public int f(int[][] dp,int[]p,int ind,int buy,int n){
//         if(ind==n){
//             return 0;
//         }
//         if(dp[ind][buy]!=-1){
//             return dp[ind][buy];
//         }
//         if(buy==1){
//             return dp[ind][buy]=Math.max(-p[ind]+f(dp,p,ind+1,0,n),f(dp,p,ind+1,1,n));
//         }
//         else{
//             return dp[ind][buy]=Math.max(p[ind]+f(dp,p,ind+1,1,n),f(dp,p,ind+1,0,n));
//         }
//     }

    public int maxProfit(int[] prices) {
        int n=prices.length;
//         int dp[][]=new int[n+1][2];
//         for(int [] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return f(dp,prices,0,1,n);

//     }
// }
        



//tabulation

int dp[][]=new int[n+1][2];
dp[n][0]=dp[n][1]=0;
for(int ind=n-1;ind>=0;ind--){
    for(int buy=0;buy<=1;buy++){
        if(buy==1){
            dp[ind][buy]=Math.max(-prices[ind]+dp[ind+1][0],0+dp[ind+1][1]);
        }
        else{
           dp[ind][buy]=Math.max(prices[ind]+dp[ind+1][1],0+dp[ind+1][0]);
    }}}
    return dp[0][1];
}}


//space optimization
// int ahead[]=new int[2];
// int cur[]=new int[2];
// ahead[0]=ahead[1]=0;
// for(int ind=n-1;ind>=0;ind--){
//     for(int buy=0;buy<=1;buy++){
//         if(buy==1){
//             cur[buy]=Math.max(-prices[ind]+ahead[0],0+ahead[1]);
//         }
//         else{
//            cur[buy]=Math.max(prices[ind]+ahead[1],0+ahead[0]);
//     }
//     ahead=cur;}}
//     return ahead[1];
// }}

