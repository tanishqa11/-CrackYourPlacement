//Optimised 

class MyQueue {

Stack<Integer> st=new Stack<>();
Stack<Integer> st1=new Stack<>();

    public MyQueue() {
        
    }
    
    public void push(int x) {
        st.push(x);   
    }
    
    public int pop() {
        int a=peek();
        st1.pop();
        return a;
    }

    public int peek() {
        if(st1.empty()){
             while(!st.empty()){
            st1.push(st.pop());
        }
        }
        return st1.peek();   
    }
    
    public boolean empty() {
        while(!st.empty() || !st1.empty()){
            return false;}
           
        return true;
    }
}

//Initialmplementation 

class MyQueue {

Stack<Integer> st=new Stack<>();
Stack<Integer> st1=new Stack<>();

    public MyQueue() {
        
    }
    
    public void push(int x) {
        st.push(x);   
    }
    
    public int pop() {
        int a=-1;
        while(!st.empty()){
            st1.push(st.pop());
        }
        a=st1.pop();
        while(!st1.empty()){
            st.push(st1.pop());
        }
        return a;
    }
    
    public int peek() {
         while(!st.empty()){
            st1.push(st.pop());
        }
        int a=st1.peek();
      
        
        while(!st1.empty()){
            st.push(st1.pop());
        }
        return a;
        
        
    }
    
    public boolean empty() {
        while(!st.empty()){
            st1.push(st.pop());
        }

        return st1.empty();
        
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
